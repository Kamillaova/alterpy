import utils.ch
import utils.cm
import utils.rand
import utils.regex
import random


async def on_da(cm: utils.cm.CommandMessage) -> None:
    if random.randint(1, 4) == 1:
        await cm.int_cur.reply(
            utils.rand.weighted([
                (1, '—Å–∫–æ–≤–æ—Ä–æ–¥–∞'),
                (1, '–ª–∞–±—É–¥–∞'),
                (1, '–≤–∏–Ω–¥–∞'),
            ])
        )


async def on_net(cm: utils.cm.CommandMessage) -> None:
    if random.randint(1, 4) == 1:
        await cm.int_cur.reply(
            utils.rand.weighted([
                (1, '—Å–æ–ª–Ω—ã—à–∫–∞ –æ—Ç–≤–µ—Ç'),
                (1, '–ª—É–Ω—ã—à–∫–∞ –æ—Ç–≤–µ—Ç'),
            ])
        )


async def on_dura(cm: utils.cm.CommandMessage) -> None:
    if random.randint(1, 4) == 1:
        await cm.int_cur.reply('–∞ –º–æ–∂–µ—Ç —Ç—ã ü§®?')


async def on_spok(cm: utils.cm.CommandMessage) -> None:
    await cm.int_cur.reply('C–ª–∞–¥–∫–∏—Ö —Å–Ω–æ–≤ ü•∫')


handler_list = [
    utils.ch.CommandHandler(name=name, pattern=utils.regex.raw(pat), help_page="kek", handler_impl=handler)
    for name, pat, handler in [
        ("–¥–∞", "\\b–¥–∞$", on_da),
        ("–Ω–µ—Ç", "\\b–Ω–µ—Ç$", on_net),
        ("–¥—É—Ä–∞", "\\b–¥—É—Ä–∞$", on_dura),
        ("—Å–ø–æ–∫–æ–π–Ω–æ–π –Ω–æ—á–∏", "^((–≤—Å–µ–º ){0,1}—Å–ø–æ–∫–æ–π–Ω–æ–π –Ω–æ—á–∏)", on_spok),
    ]
]

