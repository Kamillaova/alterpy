import utils.ch
import utils.rand
import utils.regex

handler_list = [
    utils.ch.simple_reply(
        '–¥–∞',
        utils.rand.weighted_fun([
            (1, '—Å–∫–æ–≤–æ—Ä–æ–¥–∞'),
            (1, '–ª–∞–±—É–¥–∞'),
            (1, '–≤–∏–Ω–¥–∞'),
            (7, '')
        ]),
        "kek",
        pattern="(?i)\\b–¥–∞$"
    ),
    utils.ch.simple_reply(
        '–Ω–µ—Ç',
        utils.rand.weighted_fun([
            (1, '—Å–æ–ª–Ω—ã—à–∫–∞ –æ—Ç–≤–µ—Ç'),
            (1, '–ª—É–Ω—ã—à–∫–∞ –æ—Ç–≤–µ—Ç'),
            (3, '')
        ]),
        "kek",
        pattern="(?i)\\b–Ω–µ—Ç$"
    ),
    utils.ch.simple_reply('–¥—É—Ä–∞', utils.rand.rand_or_null_fun('–∞ –º–æ–∂–µ—Ç —Ç—ã ü§®?', 1, 3),
        "kek", pattern="(?i)\\b–¥—É—Ä–∞$"),

    utils.ch.simple_reply('—Å–ø–æ–∫–æ–π–Ω–æ–π –Ω–æ—á–∏', 'C–ª–∞–¥–∫–∏—Ö —Å–Ω–æ–≤ ü•∫',
        "kek", pattern="(?i)^((–≤—Å–µ–º ){0,1}—Å–ø–æ–∫–æ–π–Ω–æ–π –Ω–æ—á–∏)"),

    utils.ch.simple_reply('law-en', r'''*First Law*
A robot may not injure a human being or, through inaction, allow a human being to come to harm.

*Second Law*
A robot must obey the orders given it by human beings except where such orders would conflict with the First Law.

*Third Law*
A robot must protect its own existence as long as such protection does not conflict with the First or Second Law.''',
                          "kek", pattern=utils.regex.pre_command('laws'))
]

